<#@ Template Language="VB" HostSpecific="True" Inherits="DynamicTransform" #>
<#@ Output extension="vbhtml" #>
<#@ assembly name="System.ComponentModel.DataAnnotations" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="System.Data.Linq" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.ComponentModel.DataAnnotations" #>
<#@ import namespace="System.Data.Linq.Mapping" #>
<#@ import namespace="System.Data.Objects.DataClasses" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="EnvDTE" #>
<# Dim viewDataType = CType(Model.ViewDataType, CodeType) #>
<# If viewDataType IsNot Nothing #>
@ModelType <#= viewDataType.FullName #>

<# End If #>
@Code
    ViewData("Title") = "<#= Model.ViewName #>"
<# If Not String.IsNullOrEmpty(Model.Layout) #>
    Layout = "<#= Model.Layout #>"
<# End If #>
End Code

<h2><#= Model.ViewName #></h2>

@Using Html.BeginForm()
    @Html.ValidationSummary(True)
    @<fieldset>
        <legend><#= If(Model.ViewDataTypeName, String.Empty) #></legend>

<#
For Each modelProp As ModelProperty In GetModelProperties(Model.ViewDataType)
    If (modelProp.IsPrimaryKey) Then
#>
        @Html.HiddenFor(Function(model) model.<#= modelProp.Name #>)

<#  ElseIf (Not modelProp.IsReadOnly) #>
        <div class="editor-label">
            @Html.LabelFor(Function(model) model.<#= modelProp.Name #>)
        </div>
        <div class="editor-field">
            @Html.EditorFor(Function(model) model.<#= modelProp.Name #>)
            @Html.ValidationMessageFor(Function(model) model.<#= modelProp.Name #>)
        </div>

<#
    End If
Next
#>
        <p>
            <input type="submit" value="Save" />
        </p>
    </fieldset>
End Using

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

<#+
' Describes the information about a property on the model
Private Class ModelProperty
    Public Name As String
    Public ValueExpression As String
    Public Type As CodeTypeRef
    Public IsReadOnly As Boolean
    Public IsPrimaryKey As Boolean
End Class

' Change this list to include any non-primitive types you think should be eligible for display/edit
Private Shared bindableNonPrimitiveTypes As Type() = New Type() {
    GetType(String),
    GetType(Decimal),
    GetType(Guid),
    GetType(DateTime),
    GetType(DateTimeOffset),
    GetType(TimeSpan)
}

' Call this to get the list of properties in the model. Change this to modify or add your
' own default formatting for display values.
Private Function GetModelProperties(ByVal type As CodeType) As List(Of ModelProperty)
    Dim results As List(Of ModelProperty) = GetEligibleProperties(type)
    
    For Each modelProp As ModelProperty In results
        If ((modelProp.Type.UnderlyingTypeIs(GetType(Double))) OrElse (modelProp.Type.UnderlyingTypeIs(GetType(Decimal)))) Then
            modelProp.ValueExpression = ("String.Format(""{0:F}"", " & modelProp.ValueExpression & ")")
        ElseIf (modelProp.Type.UnderlyingTypeIs(GetType(DateTime))) Then
            modelProp.ValueExpression = ("String.Format(""{0:g}"", " & modelProp.ValueExpression & ")")
        End If
    Next

    Return results
End Function

' Helper
Private Function GetEligibleProperties(ByVal type As CodeType) As List(Of ModelProperty)
    Dim results As New List(Of ModelProperty)

	If type IsNot Nothing Then
		For Each prop As CodeProperty In type.VisibleMembers().OfType(Of CodeProperty)()
			If (prop.IsReadable() AndAlso (Not prop.HasIndexParameters()) AndAlso IsBindableType(prop.Type)) Then
				results.Add(New ModelProperty() With { _
					.Name = prop.Name, _
					.ValueExpression = ("Model." & prop.Name), _
					.Type = prop.Type, _
					.IsPrimaryKey = Model.PrimaryKeyName = prop.Name, _
					.IsReadOnly = Not prop.IsWriteable() _
				})
			End If
		Next
	End If

    Return results
End Function

' Helper
Private Function IsBindableType(ByVal type As CodeTypeRef) As Boolean
    Return type.UnderlyingIsPrimitive() OrElse bindableNonPrimitiveTypes.Any(Function(x) type.UnderlyingTypeIs(x))
End Function
#>