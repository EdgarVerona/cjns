
--------------------------------
-- TODO
--------------------------------

* Prep work for Post/Get Commands
	- Learn how to map XML to Model
	- Learn how to map JSON to Model, if needed
		- Investigate further into nature of POSTing JSON or JSON-like content.
	
* What to expose, Minimum
	- Service
		- GET /Service.[Format] -> Return Service Document
			- Result: Views/Service/Service.cshtml
	- Collection
		- GET /Collection/[Id].[Format] -> Return paged Feed of Collection
			- Result: Views/Collection/Feed.cshtml
		- POST /Collection/[Id].[Format] -> Create Entry, return Entry Atom Document
			- Expects:
				- Atom Entry 
					- Http Header
						- Content-Type:(application/atom+xml or application/atom+xml;type=entry)
					- Atom Entry, in Atom Xml format, representing the Entry to be created.
					- (Theoretical, for our improvement purposes) Atom Entry, in Json format, representing the Entry to be created.
					- See Section 9.2 in rfc5023
				- Media Resource (base 64 encoded data)
					- Http header
						- Content-Type: (other types, allowed by collection)
					- if a media resource is sent, it must create two resources:
						- Media Resource
							- Data actually saved and accessible in the system
							- i.e. the actual movie, image, etc...
							- This may end up being located on a content distribution network, cache, filesystem etc
						- Media Link Entry
							- Represented as an Atom Entry
							- Will appear in the Collection
							- Provides a link to the actual stored "Media Resource"
					- See Section 9.6 in rfc5023
			- Result: Entry/Entry.cshtml
				- Http header
					- 201 ("Created")
					- Content-Location: (Uri of new entry)
					- ETag: (Hash of story, or other unique "version" identifier)
				- If Atom Entry:
					- Return saved Atom Entry with new location
				- If Media resource:
					- Return saved Atom Entry, with Content src = URL of saved resource
					- link rel="edit-media" with edit link for the actual resource
	Entries
		- GET Entry/[Id].[Format] -> Return Atom Entry
			- Expects:
				- May pass in "If-None-Match" in header, wtih last known ETag.
			- Result: Entry/Entry.cshtml
				- If ETag is the same for current version, return 304 ("Not Modified")
		- PUT Entry/[Id].[Format] -> Edit Atom Entry, Return modified Entry
			- Expects:
				- Atom Entry (in Atom XML [Or Json]) format, to put into existing resource
				- May pass in "If-Match" in header, with last known ETag.
			- Result: Entry/Entry.cshtml with changes
				- If not exist, return 204.
				- If "If-Match" ETag doesn't match latest version, return 412 ("Precondition Failed") instead
		- DELETE Entry/[Id] -. Delete atom entry, return 200 OK
			- Expects: N/A
			- Result:
				- Deletion of Entry
				- If Entry was a Media Resource, deletion of Resource
